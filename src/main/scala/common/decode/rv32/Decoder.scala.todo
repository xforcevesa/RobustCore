package common.decode.rv32

import chisel3._
import chisel3.util._

import Instruction._
import common.decode.Consts._
import common.utils.ImplicitCast._
import common.decode.DecodeLogic
import common.decode.CauseCode._
import common.decode._

trait DecodeTable {
    val DC2 = BitPat.dontCare(2)
    def decode_default: List[BitPat] =
    //
    //       is val inst?                                             bypassable
    //       |    micro-code                       uses_ldg               |  is_br
    //       |    |  iq-type                       |  uses_stq            |  |
    //       |    |     |     func unit            |  |  is_ll            |  |  is_unique(clear pipeline for it)
    //       |    |     |      |     dst_type      |  |  |     is_dbar    |  |  |  flush_on_commit
    //       |    |     |      |     |    rs1_typ  |  |  | is_sc| is_ibar |  |  |  |
    //       |    |     |      |     |    |        |  |  |  |   |  |      |  |  |  |
    //       |    |     |      |     |    | rs2_typ|  |  |  |   |  |      |  |  |  |
    //       |    |     |      |     |    |    |   |  |  |  |   |  |      |  |  |  |
        List(N, uopX, IQT_X, FU_X, RT_X, DC2, DC2, X, X, X, N,  X, N,     X, X, N, X)

    val table: Array[(BitPat, List[BitPat])]
}
// scalastyle:on

/**
 * Decoded control signals
 */
class CtrlSigs extends Bundle {
    val legal           = Bool() //合法指令
    val uopc            = UInt(UOPC_SZ.W) //指令对应的uop操作
    val iq_type         = UInt(IQT_SZ.W) //issue queue type
    val fu_code         = UInt(FUC_SZ.W) //function code
    val dst_type        = UInt(1.W) //
    val rs1_type        = UInt(1.W) //
    val rs2_type        = UInt(1.W) //
    val uses_ldq        = Bool() //是否使用load
    val uses_stq        = Bool() //是否使用store
    val is_ll           = Bool()
    val is_sc           = Bool()
    val is_dbar         = Bool() //栅障指令
    val is_ibar         = Bool()
    val bypassable      = Bool() //rename中需要
    val is_br           = Bool() //
    val inst_unique     = Bool() //
    val flush_on_commit = Bool()
    def decode(instr: UInt, table: Iterable[(BitPat, List[BitPat])]) = {
        val decoder = DecodeLogic(instr, XDecode.decode_default, table)
        val sigs = Seq(
            legal, uopc, iq_type, fu_code, dst_type, rs1_type, rs2_type,
            uses_ldq, uses_stq, is_ll, is_sc, is_dbar, is_ibar,
            bypassable, is_br, inst_unique, flush_on_commit
        )
        sigs zip decoder map { case (s, d) => s := d }
        this
    }
}

// scalastyle:off
/**
 * Decode constants for RV32
 */
object X32Decode extends DecodeTable
{
    import Instruction32._
    val table: Array[(BitPat, List[BitPat])] = Array(
                //
                //    is val inst?                                                                     bypassable
                //        | micro-code                                           uses_ldg                  | is_br
                //        |    |           iq-type                                  | uses_stq             |  |
                //        |    |              |   func unit                         |  |  is_ll            |  | is_unique(clear pipeline for it)
                //        |    |              |       |    dst_type                 |  |  |     is_dbar    |  |  | flush_on_commit
                //        |    |              |       |       |    rs1_type         |  |  | is_sc| is_ibar |  |  |  |
                //        |    |              |       |       |       |             |  |  |  |   |  |      |  |  |  |
                //        |    |              |       |       |       |    rs2_type |  |  |  |   |  |      |  |  |  |
                //        |    |              |       |       |       |       |     |  |  |  |   |  |      |  |  |  |
                //        |    |              |       |       |       |       |     |  |  |  |   |  |      |  |  |  |
    SLLI          -> List(Y, uopSLLIW,      IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_X, N, N, N, N,  N, N  ,   Y, N, N, N, N),
    SRLI          -> List(Y, uopSRLIW,      IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_X, N, N, N, N,  N, N  ,   Y, N, N, N, N),
    SRAI          -> List(Y, uopSRAIW,      IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_X, N, N, N, N,  N, N  ,   Y, N, N, N, N)
  )
}

/**
 * Decode constants for RV64
 */
object X64Decode extends DecodeTable
{
  val table: Array[(BitPat, List[BitPat])] = Array(
                //
                //    is val inst?                                                                     bypassable
                //        | micro-code                                           uses_ldg                  | is_br
                //        |    |           iq-type                                  | uses_stq             |  |
                //        |    |              |   func unit                         |  |  is_ll            |  | is_unique(clear pipeline for it)
                //        |    |              |       |    dst_type                 |  |  |     is_dbar    |  |  | flush_on_commit
                //        |    |              |       |       |    rs1_type         |  |  | is_sc| is_ibar |  |  |  |
                //        |    |              |       |       |       |             |  |  |  |   |  |      |  |  |  |
                //        |    |              |       |       |       |    rs2_type |  |  |  |   |  |      |  |  |  |
                //        |    |              |       |       |       |       |     |  |  |  |   |  |      |  |  |  |
                //        |    |              |       |       |       |       |     |  |  |  |   |  |      |  |  |  |
    LD            -> List(Y, uopLD   ,    IQT_MEM, FU_MEM , RT_FIX, RT_FIX, RT_X  , Y, N, N, N,  N, N,     N, N, N, N),
    LWU           -> List(Y, uopLD   ,    IQT_MEM, FU_MEM , RT_FIX, RT_FIX, RT_X  , Y, N, N, N,  N, N,     N, N, N, N),
    SD            -> List(Y, uopSTA  ,    IQT_MEM, FU_MEM , RT_X  , RT_FIX, RT_FIX, N, Y, N, N,  N, N,     N, N, N, N),

    SLLI          -> List(Y, uopSLLIW ,   IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_X  , N, N, N, N,  N, N,     Y, N, N, N),
    SRLI          -> List(Y, uopSRLIW ,   IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_X  , N, N, N, N,  N, N,     Y, N, N, N),
    SRAI          -> List(Y, uopSRAIW ,   IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_X  , N, N, N, N,  N, N,     Y, N, N, N),

    ADDIW         -> List(Y, uopADDIW,    IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_X  , N, N, N, N,  N, N,     Y, N, N, N),
    SLLIW         -> List(Y, uopSLLIW,    IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_X  , N, N, N, N,  N, N,     Y, N, N, N),
    SRAIW         -> List(Y, uopSRAIW,    IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_X  , N, N, N, N,  N, N,     Y, N, N, N),
    SRLIW         -> List(Y, uopSRLIW,    IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_X  , N, N, N, N,  N, N,     Y, N, N, N),

    ADDW          -> List(Y, uopADD ,     IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_FIX, N, N, N, N,  N, N,     Y, N, N, N),
    SUBW          -> List(Y, uopSUB ,     IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_FIX, N, N, N, N,  N, N,     Y, N, N, N),
    SLLW          -> List(Y, uopSLLW ,    IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_FIX, N, N, N, N,  N, N,     Y, N, N, N),
    SRAW          -> List(Y, uopSRAW ,    IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_FIX, N, N, N, N,  N, N,     Y, N, N, N),
    SRLW          -> List(Y, uopSRLW ,    IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_FIX, N, N, N, N,  N, N,     Y, N, N, N)
  )
}

/**
 * Overall Decode constants
 */
object XDecode extends DecodeTable
{
  val table: Array[(BitPat, List[BitPat])] = Array(
                //
                //    is val inst?                                                                   bypassable
                //        | micro-code                                         uses_ldg                  | is_br
                //        |    |         iq-type                                  | uses_stq             |  |
                //        |    |            |   func unit                         |  |  is_ll            |  | is_unique(clear pipeline for it)
                //        |    |            |       |    dst_type                 |  |  |     is_dbar    |  |  | flush_on_commit
                //        |    |            |       |       |    rs1_type         |  |  | is_sc| is_ibar |  |  |  |
                //        |    |            |       |       |       |             |  |  |  |   |  |      |  |  |  |
                //        |    |            |       |       |       |    rs2_type |  |  |  |   |  |      |  |  |  |
                //        |    |            |       |       |       |       |     |  |  |  |   |  |      |  |  |  |
                //        |    |            |       |       |       |       |     |  |  |  |   |  |      |  |  |  |
    LW            -> List(Y, uopLD   , IQT_MEM, FU_MEM , RT_FIX, RT_FIX, RT_X  ,  Y, N, N, N,  N, N,     N, N, N, N),
    LH            -> List(Y, uopLD   , IQT_MEM, FU_MEM , RT_FIX, RT_FIX, RT_X  ,  Y, N, N, N,  N, N,     N, N, N, N),
    LHU           -> List(Y, uopLD   , IQT_MEM, FU_MEM , RT_FIX, RT_FIX, RT_X  ,  Y, N, N, N,  N, N,     N, N, N, N),
    LB            -> List(Y, uopLD   , IQT_MEM, FU_MEM , RT_FIX, RT_FIX, RT_X  ,  Y, N, N, N,  N, N,     N, N, N, N),
    LBU           -> List(Y, uopLD   , IQT_MEM, FU_MEM , RT_FIX, RT_FIX, RT_X  ,  Y, N, N, N,  N, N,     N, N, N, N),

    SW            -> List(Y, uopSTA  , IQT_MEM, FU_MEM , RT_X  , RT_FIX, RT_FIX,  N, Y, N, N,  N, N,     N, N, N, N),
    SH            -> List(Y, uopSTA  , IQT_MEM, FU_MEM , RT_X  , RT_FIX, RT_FIX,  N, Y, N, N,  N, N,     N, N, N, N),
    SB            -> List(Y, uopSTA  , IQT_MEM, FU_MEM , RT_X  , RT_FIX, RT_FIX,  N, Y, N, N,  N, N,     N, N, N, N, N, CSR.N),

    LUI           -> List(Y, uopLUI  , IQT_INT, FU_ALU , RT_FIX, RT_X  , RT_X  ,  N, N, N, N, N, M_X  , 1.U, Y, N, N, N, N, CSR.N),

    ADDI          -> List(Y, uopADDI , IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_X  ,  N, N, N, N, N, M_X  , 1.U, Y, N, N, N, N, CSR.N),
    ANDI          -> List(Y, uopANDI , IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_X  ,  N, N, N, N, N, M_X  , 1.U, Y, N, N, N, N, CSR.N),
    ORI           -> List(Y, uopORI  , IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_X  ,  N, N, N, N, N, M_X  , 1.U, Y, N, N, N, N, CSR.N),
    XORI          -> List(Y, uopXORI , IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_X  ,  N, N, N, N, N, M_X  , 1.U, Y, N, N, N, N, CSR.N),
    SLTI          -> List(Y, uopSLTI , IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_X  ,  N, N, N, N, N, M_X  , 1.U, Y, N, N, N, N, CSR.N),
    SLTIU         -> List(Y, uopSLTIU, IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_X  ,  N, N, N, N, N, M_X  , 1.U, Y, N, N, N, N, CSR.N),

    SLL           -> List(Y, uopSLL  , IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_FIX,  N, N, N, N, N, M_X  , 1.U, Y, N, N, N, N, CSR.N),
    ADD           -> List(Y, uopADD  , IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_FIX,  N, N, N, N, N, M_X  , 1.U, Y, N, N, N, N, CSR.N),
    SUB           -> List(Y, uopSUB  , IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_FIX,  N, N, N, N, N, M_X  , 1.U, Y, N, N, N, N, CSR.N),
    SLT           -> List(Y, uopSLT  , IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_FIX,  N, N, N, N, N, M_X  , 1.U, Y, N, N, N, N, CSR.N),
    SLTU          -> List(Y, uopSLTU , IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_FIX,  N, N, N, N, N, M_X  , 1.U, Y, N, N, N, N, CSR.N),
    AND           -> List(Y, uopAND  , IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_FIX,  N, N, N, N, N, M_X  , 1.U, Y, N, N, N, N, CSR.N),
    OR            -> List(Y, uopOR   , IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_FIX,  N, N, N, N, N, M_X  , 1.U, Y, N, N, N, N, CSR.N),
    XOR           -> List(Y, uopXOR  , IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_FIX,  N, N, N, N, N, M_X  , 1.U, Y, N, N, N, N, CSR.N),
    SRA           -> List(Y, uopSRA  , IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_FIX,  N, N, N, N, N, M_X  , 1.U, Y, N, N, N, N, CSR.N),
    SRL           -> List(Y, uopSRL  , IQT_INT, FU_ALU , RT_FIX, RT_FIX, RT_FIX,  N, N, N, N, N, M_X  , 1.U, Y, N, N, N, N, CSR.N),

    MUL           -> List(Y, uopMUL  , IQT_INT, FU_MUL , RT_FIX, RT_FIX, RT_FIX,  N, N, N, N, N, M_X  , 0.U, N, N, N, N, N, CSR.N),
    MULH          -> List(Y, uopMULH , IQT_INT, FU_MUL , RT_FIX, RT_FIX, RT_FIX,  N, N, N, N, N, M_X  , 0.U, N, N, N, N, N, CSR.N),
    MULHU         -> List(Y, uopMULHU, IQT_INT, FU_MUL , RT_FIX, RT_FIX, RT_FIX,  N, N, N, N, N, M_X  , 0.U, N, N, N, N, N, CSR.N),
    MULHSU        -> List(Y, uopMULHSU,IQT_INT, FU_MUL , RT_FIX, RT_FIX, RT_FIX,  N, N, N, N, N, M_X  , 0.U, N, N, N, N, N, CSR.N),
    MULW          -> List(Y, uopMULW , IQT_INT, FU_MUL , RT_FIX, RT_FIX, RT_FIX,  N, N, N, N, N, M_X  , 0.U, N, N, N, N, N, CSR.N),

    DIV           -> List(Y, uopDIV  , IQT_INT, FU_DIV , RT_FIX, RT_FIX, RT_FIX,  N, N, N, N, N, M_X  , 0.U, N, N, N, N, N, CSR.N),
    DIVU          -> List(Y, uopDIVU , IQT_INT, FU_DIV , RT_FIX, RT_FIX, RT_FIX,  N, N, N, N, N, M_X  , 0.U, N, N, N, N, N, CSR.N),
    REM           -> List(Y, uopREM  , IQT_INT, FU_DIV , RT_FIX, RT_FIX, RT_FIX,  N, N, N, N, N, M_X  , 0.U, N, N, N, N, N, CSR.N),
    REMU          -> List(Y, uopREMU , IQT_INT, FU_DIV , RT_FIX, RT_FIX, RT_FIX,  N, N, N, N, N, M_X  , 0.U, N, N, N, N, N, CSR.N),
    DIVW          -> List(Y, uopDIVW , IQT_INT, FU_DIV , RT_FIX, RT_FIX, RT_FIX,  N, N, N, N, N, M_X  , 0.U, N, N, N, N, N, CSR.N),
    DIVUW         -> List(Y, uopDIVUW, IQT_INT, FU_DIV , RT_FIX, RT_FIX, RT_FIX,  N, N, N, N, N, M_X  , 0.U, N, N, N, N, N, CSR.N),
    REMW          -> List(Y, uopREMW , IQT_INT, FU_DIV , RT_FIX, RT_FIX, RT_FIX,  N, N, N, N, N, M_X  , 0.U, N, N, N, N, N, CSR.N),
    REMUW         -> List(Y, uopREMUW, IQT_INT, FU_DIV , RT_FIX, RT_FIX, RT_FIX,  N, N, N, N, N, M_X  , 0.U, N, N, N, N, N, CSR.N),

    AUIPC         -> List(Y, uopAUIPC, IQT_INT, FU_JMP , RT_FIX, RT_X  , RT_X  ,  N, N, N, N, N, M_X  , 1.U, N, N, N, N, N, CSR.N), // use BRU for the PC read
    JAL           -> List(Y, uopJAL  , IQT_INT, FU_JMP , RT_FIX, RT_X  , RT_X  ,  N, N, N, N, N, M_X  , 1.U, N, N, N, N, N, CSR.N),
    JALR          -> List(Y, uopJALR , IQT_INT, FU_JMP , RT_FIX, RT_FIX, RT_X  ,  N, N, N, N, N, M_X  , 1.U, N, N, N, N, N, CSR.N),
    BEQ           -> List(Y, uopBEQ  , IQT_INT, FU_ALU , RT_X  , RT_FIX, RT_FIX,  N, N, N, N, N, M_X  , 0.U, N, Y, N, N, N, CSR.N),
    BNE           -> List(Y, uopBNE  , IQT_INT, FU_ALU , RT_X  , RT_FIX, RT_FIX,  N, N, N, N, N, M_X  , 0.U, N, Y, N, N, N, CSR.N),
    BGE           -> List(Y, uopBGE  , IQT_INT, FU_ALU , RT_X  , RT_FIX, RT_FIX,  N, N, N, N, N, M_X  , 0.U, N, Y, N, N, N, CSR.N),
    BGEU          -> List(Y, uopBGEU , IQT_INT, FU_ALU , RT_X  , RT_FIX, RT_FIX,  N, N, N, N, N, M_X  , 0.U, N, Y, N, N, N, CSR.N),
    BLT           -> List(Y, uopBLT  , IQT_INT, FU_ALU , RT_X  , RT_FIX, RT_FIX,  N, N, N, N, N, M_X  , 0.U, N, Y, N, N, N, CSR.N),
    BLTU          -> List(Y, uopBLTU , IQT_INT, FU_ALU , RT_X  , RT_FIX, RT_FIX,  N, N, N, N, N, M_X  , 0.U, N, Y, N, N, N, CSR.N),

    // I-type, the immediate12 holds the CSR register.
    CSRRW         -> List(Y, uopCSRRW, IQT_INT, FU_CSR , RT_FIX, RT_FIX, RT_X  ,  N, N, N, N, N, M_X  , 0.U, N, N, N, Y, Y, CSR.W),
    CSRRS         -> List(Y, uopCSRRS, IQT_INT, FU_CSR , RT_FIX, RT_FIX, RT_X  ,  N, N, N, N, N, M_X  , 0.U, N, N, N, Y, Y, CSR.S),
    CSRRC         -> List(Y, uopCSRRC, IQT_INT, FU_CSR , RT_FIX, RT_FIX, RT_X  ,  N, N, N, N, N, M_X  , 0.U, N, N, N, Y, Y, CSR.C),

    CSRRWI        -> List(Y, uopCSRRWI,IQT_INT, FU_CSR , RT_FIX, RT_PAS, RT_X  ,  N, N, N, N, N, M_X  , 0.U, N, N, N, Y, Y, CSR.W),
    CSRRSI        -> List(Y, uopCSRRSI,IQT_INT, FU_CSR , RT_FIX, RT_PAS, RT_X  ,  N, N, N, N, N, M_X  , 0.U, N, N, N, Y, Y, CSR.S),
    CSRRCI        -> List(Y, uopCSRRCI,IQT_INT, FU_CSR , RT_FIX, RT_PAS, RT_X  ,  N, N, N, N, N, M_X  , 0.U, N, N, N, Y, Y, CSR.C),

    SFENCE_VMA    -> List(Y, uopSFENCE,IQT_MEM, FU_MEM , RT_X  , RT_FIX, RT_FIX,  N, N, N, N, N,M_SFENCE,0.U,N, N, N, Y, Y, CSR.N),
    ECALL         -> List(Y, uopERET  ,IQT_INT, FU_CSR , RT_X  , RT_X  , RT_X  ,  N, N, N, N, N, M_X  , 0.U, N, N, Y, Y, Y, CSR.I),
    EBREAK        -> List(Y, uopERET  ,IQT_INT, FU_CSR , RT_X  , RT_X  , RT_X  ,  N, N, N, N, N, M_X  , 0.U, N, N, Y, Y, Y, CSR.I),
    SRET          -> List(Y, uopERET  ,IQT_INT, FU_CSR , RT_X  , RT_X  , RT_X  ,  N, N, N, N, N, M_X  , 0.U, N, N, N, Y, Y, CSR.I),
    MRET          -> List(Y, uopERET  ,IQT_INT, FU_CSR , RT_X  , RT_X  , RT_X  ,  N, N, N, N, N, M_X  , 0.U, N, N, N, Y, Y, CSR.I),
    DRET          -> List(Y, uopERET  ,IQT_INT, FU_CSR , RT_X  , RT_X  , RT_X  ,  N, N, N, N, N, M_X  , 0.U, N, N, N, Y, Y, CSR.I),

    WFI           -> List(Y, uopWFI   ,IQT_INT, FU_CSR , RT_X  , RT_X  , RT_X  ,  N, N, N, N, N, M_X  , 0.U, N, N, N, Y, Y, CSR.I),

    FENCE_I       -> List(Y, uopNOP  , IQT_INT, FU_X   , RT_X  , RT_X  , RT_X  ,  N, N, N, N, Y, M_X  , 0.U, N, N, N, Y, Y, CSR.N),
    FENCE         -> List(Y, uopFENCE, IQT_INT, FU_MEM , RT_X  , RT_X  , RT_X  ,  N, Y, N, Y, N, M_X  , 0.U, N, N, N, Y, Y, CSR.N), // TODO PERF make fence higher performance
                                                                                                                                                        // currently serializes pipeline

            //
                //    is val inst?                                                                     bypassable
                //        | micro-code                                           uses_ldg                  | is_br
                //        |    |           iq-type                                  | uses_stq             |  |
                //        |    |              |   func unit                         |  |  is_ll            |  | is_unique(clear pipeline for it)
                //        |    |              |       |    dst_type                 |  |  |     is_dbar    |  |  | flush_on_commit
                //        |    |              |       |       |    rs1_type         |  |  | is_sc| is_ibar |  |  |  |
                //        |    |              |       |       |       |             |  |  |  |   |  |      |  |  |  |
                //        |    |              |       |       |       |    rs2_type |  |  |  |   |  |      |  |  |  |
                //        |    |              |       |       |       |       |     |  |  |  |   |  |      |  |  |  |
                //        |    |              |       |       |       |       |     |  |  |  |   |  |      |  |  |  |
    AMOADD_W      -> List(Y, uopAMO_AG, IQT_MEM, FU_MEM, RT_FIX, RT_FIX, RT_FIX,  N, Y, Y, N, N, M_XA_ADD, 0.U,N, N, N, Y, Y, CSR.N), // TODO make AMOs higherperformance
    AMOXOR_W      -> List(Y, uopAMO_AG, IQT_MEM, FU_MEM, RT_FIX, RT_FIX, RT_FIX,  N, Y, Y, N, N, M_XA_XOR, 0.U,N, N, N, Y, Y, CSR.N),
    AMOSWAP_W     -> List(Y, uopAMO_AG, IQT_MEM, FU_MEM, RT_FIX, RT_FIX, RT_FIX,  N, Y, Y, N, N, M_XA_SWAP,0.U,N, N, N, Y, Y, CSR.N),
    AMOAND_W      -> List(Y, uopAMO_AG, IQT_MEM, FU_MEM, RT_FIX, RT_FIX, RT_FIX,  N, Y, Y, N, N, M_XA_AND, 0.U,N, N, N, Y, Y, CSR.N),
    AMOOR_W       -> List(Y, uopAMO_AG, IQT_MEM, FU_MEM, RT_FIX, RT_FIX, RT_FIX,  N, Y, Y, N, N, M_XA_OR,  0.U,N, N, N, Y, Y, CSR.N),
    AMOMIN_W      -> List(Y, uopAMO_AG, IQT_MEM, FU_MEM, RT_FIX, RT_FIX, RT_FIX,  N, Y, Y, N, N, M_XA_MIN, 0.U,N, N, N, Y, Y, CSR.N),
    AMOMINU_W     -> List(Y, uopAMO_AG, IQT_MEM, FU_MEM, RT_FIX, RT_FIX, RT_FIX,  N, Y, Y, N, N, M_XA_MINU,0.U,N, N, N, Y, Y, CSR.N),
    AMOMAX_W      -> List(Y, uopAMO_AG, IQT_MEM, FU_MEM, RT_FIX, RT_FIX, RT_FIX,  N, Y, Y, N, N, M_XA_MAX, 0.U,N, N, N, Y, Y, CSR.N),
    AMOMAXU_W     -> List(Y, uopAMO_AG, IQT_MEM, FU_MEM, RT_FIX, RT_FIX, RT_FIX,  N, Y, Y, N, N, M_XA_MAXU,0.U,N, N, N, Y, Y, CSR.N),

    AMOADD_D      -> List(Y, uopAMO_AG, IQT_MEM, FU_MEM, RT_FIX, RT_FIX, RT_FIX,  N, Y, Y, N, N, M_XA_ADD, 0.U,N, N, N, Y, Y, CSR.N),
    AMOXOR_D      -> List(Y, uopAMO_AG, IQT_MEM, FU_MEM, RT_FIX, RT_FIX, RT_FIX,  N, Y, Y, N, N, M_XA_XOR, 0.U,N, N, N, Y, Y, CSR.N),
    AMOSWAP_D     -> List(Y, uopAMO_AG, IQT_MEM, FU_MEM, RT_FIX, RT_FIX, RT_FIX,  N, Y, Y, N, N, M_XA_SWAP,0.U,N, N, N, Y, Y, CSR.N),
    AMOAND_D      -> List(Y, uopAMO_AG, IQT_MEM, FU_MEM, RT_FIX, RT_FIX, RT_FIX,  N, Y, Y, N, N, M_XA_AND, 0.U,N, N, N, Y, Y, CSR.N),
    AMOOR_D       -> List(Y, uopAMO_AG, IQT_MEM, FU_MEM, RT_FIX, RT_FIX, RT_FIX,  N, Y, Y, N, N, M_XA_OR,  0.U,N, N, N, Y, Y, CSR.N),
    AMOMIN_D      -> List(Y, uopAMO_AG, IQT_MEM, FU_MEM, RT_FIX, RT_FIX, RT_FIX,  N, Y, Y, N, N, M_XA_MIN, 0.U,N, N, N, Y, Y, CSR.N),
    AMOMINU_D     -> List(Y, uopAMO_AG, IQT_MEM, FU_MEM, RT_FIX, RT_FIX, RT_FIX,  N, Y, Y, N, N, M_XA_MINU,0.U,N, N, N, Y, Y, CSR.N),
    AMOMAX_D      -> List(Y, uopAMO_AG, IQT_MEM, FU_MEM, RT_FIX, RT_FIX, RT_FIX,  N, Y, Y, N, N, M_XA_MAX, 0.U,N, N, N, Y, Y, CSR.N),
    AMOMAXU_D     -> List(Y, uopAMO_AG, IQT_MEM, FU_MEM, RT_FIX, RT_FIX, RT_FIX,  N, Y, Y, N, N, M_XA_MAXU,0.U,N, N, N, Y, Y, CSR.N),

    LR_W          -> List(Y, uopLD    , IQT_MEM, FU_MEM, RT_FIX, RT_FIX, RT_X  ,  Y, N, N, N, N, M_XLR   , 0.U,N, N, N, Y, Y, CSR.N),
    LR_D          -> List(Y, uopLD    , IQT_MEM, FU_MEM, RT_FIX, RT_FIX, RT_X  ,  Y, N, N, N, N, M_XLR   , 0.U,N, N, N, Y, Y, CSR.N),
    SC_W          -> List(Y, uopAMO_AG, IQT_MEM, FU_MEM, RT_FIX, RT_FIX, RT_FIX,  N, Y, Y, N, N, M_XSC   , 0.U,N, N, N, Y, Y, CSR.N),
    SC_D          -> List(Y, uopAMO_AG, IQT_MEM, FU_MEM, RT_FIX, RT_FIX, RT_FIX,  N, Y, Y, N, N, M_XSC   , 0.U,N, N, N, Y, Y, CSR.N)
  )
}

/**
 * IO bundle for the Decode unit
 */
class DecodeUnitIo(implicit p: Parameters) extends BoomBundle
{
  val enq = new Bundle { val uop = Input(new MicroOp()) }
  val deq = new Bundle { val uop = Output(new MicroOp()) }

  // from CSRFile
  val status = Input(new freechips.rocketchip.rocket.MStatus())
  val csr_decode = Flipped(new freechips.rocketchip.rocket.CSRDecodeIO)
  val interrupt = Input(Bool())
  val interrupt_cause = Input(UInt(xLen.W))
}

/**
 * Decode unit that takes in a single instruction and generates a MicroOp.
 */
class DecodeUnit(implicit p: Parameters) extends BoomModule
  with freechips.rocketchip.rocket.constants.MemoryOpConstants
{
  val io = IO(new DecodeUnitIo)

  val uop = Wire(new MicroOp())
  uop := io.enq.uop

  var decode_table = XDecode.table
  if (usingFPU) decode_table ++= FDecode.table
  if (usingFPU && usingFDivSqrt) decode_table ++= FDivSqrtDecode.table
  if (usingRoCC) decode_table ++= RoCCDecode.table
  decode_table ++= (if (xLen == 64) X64Decode.table else X32Decode.table)

  val inst = uop.inst

  val cs = Wire(new CtrlSigs()).decode(inst, decode_table)

  // Exception Handling
  io.csr_decode.inst := inst
  val csr_en = cs.csr_cmd.isOneOf(CSR.S, CSR.C, CSR.W)
  val csr_ren = cs.csr_cmd.isOneOf(CSR.S, CSR.C) && uop.lrs1 === 0.U
  val system_insn = cs.csr_cmd === CSR.I
  val sfence = cs.uopc === uopSFENCE

  val cs_legal = cs.legal
//   dontTouch(cs_legal)

  val id_illegal_insn = !cs_legal ||
    cs.fp_val && io.csr_decode.fp_illegal || // TODO check for illegal rm mode: (io.fpu.illegal_rm)
    cs.rocc && io.csr_decode.rocc_illegal ||
    cs.is_amo && !io.status.isa('a'-'a')  ||
    (cs.fp_val && !cs.fp_single) && !io.status.isa('d'-'a') ||
    csr_en && (io.csr_decode.read_illegal || !csr_ren && io.csr_decode.write_illegal) ||
    ((sfence || system_insn) && io.csr_decode.system_illegal)

//     cs.div && !csr.io.status.isa('m'-'a') || TODO check for illegal div instructions

  def checkExceptions(x: Seq[(Bool, UInt)]) =
    (x.map(_._1).reduce(_||_), PriorityMux(x))

  val (xcpt_valid, xcpt_cause) = checkExceptions(List(
    (io.interrupt && !io.enq.uop.is_sfb, io.interrupt_cause),  // Disallow interrupts while we are handling a SFB
    (uop.bp_debug_if,                    (CSR.debugTriggerCause).U),
    (uop.bp_xcpt_if,                     (Causes.breakpoint).U),
    (uop.xcpt_pf_if,                     (Causes.fetch_page_fault).U),
    (uop.xcpt_ae_if,                     (Causes.fetch_access).U),
    (id_illegal_insn,                    (Causes.illegal_instruction).U)))

  uop.exception := xcpt_valid
  uop.exc_cause := xcpt_cause

  //-------------------------------------------------------------

  uop.uopc       := cs.uopc
  uop.iq_type    := cs.iq_type
  uop.fu_code    := cs.fu_code

  // x-registers placed in 0-31, f-registers placed in 32-63.
  // This allows us to straight-up compare register specifiers and not need to
  // verify the rtypes (e.g., bypassing in rename).
  uop.ldst       := inst(RD_MSB,RD_LSB)
  uop.lrs1       := inst(RS1_MSB,RS1_LSB)
  uop.lrs2       := inst(RS2_MSB,RS2_LSB)
  uop.lrs3       := inst(RS3_MSB,RS3_LSB)

  uop.ldst_val   := cs.dst_type =/= RT_X && !(uop.ldst === 0.U && uop.dst_rtype === RT_FIX)
  uop.dst_rtype  := cs.dst_type
  uop.lrs1_rtype := cs.rs1_type
  uop.lrs2_rtype := cs.rs2_type
  uop.frs3_en    := cs.frs3_en

  uop.ldst_is_rs1 := uop.is_sfb_shadow
  // SFB optimization
  when (uop.is_sfb_shadow && cs.rs2_type === RT_X) {
    uop.lrs2_rtype  := RT_FIX
    uop.lrs2        := inst(RD_MSB,RD_LSB)
    uop.ldst_is_rs1 := false.B
  } .elsewhen (uop.is_sfb_shadow && cs.uopc === uopADD && inst(RS1_MSB,RS1_LSB) === 0.U) {
    uop.uopc        := uopMOV
    uop.lrs1        := inst(RD_MSB, RD_LSB)
    uop.ldst_is_rs1 := true.B
  }
  when (uop.is_sfb_br) {
    uop.fu_code := FU_JMP
  }


  uop.fp_val     := cs.fp_val
  uop.fp_single  := cs.fp_single // TODO use this signal instead of the FPU decode's table signal?

  uop.mem_cmd    := cs.mem_cmd
  uop.mem_size   := Mux(cs.mem_cmd.isOneOf(M_SFENCE, M_FLUSH_ALL), Cat(uop.lrs2 =/= 0.U, uop.lrs1 =/= 0.U), inst(13,12))
  uop.mem_signed := !inst(14)
  uop.uses_ldq   := cs.uses_ldq
  uop.uses_stq   := cs.uses_stq
  uop.is_amo     := cs.is_amo
  uop.is_fence   := cs.is_fence
  uop.is_fencei  := cs.is_fencei
  uop.is_sys_pc2epc   := cs.is_sys_pc2epc
  uop.is_unique  := cs.inst_unique
  uop.flush_on_commit := cs.flush_on_commit || (csr_en && !csr_ren && io.csr_decode.write_flush)

  uop.bypassable   := cs.bypassable

  //-------------------------------------------------------------
  // immediates

  // repackage the immediate, and then pass the fewest number of bits around
  val di24_20 = Mux(cs.imm_sel === IS_B || cs.imm_sel === IS_S, inst(11,7), inst(24,20))
  uop.imm_packed := Cat(inst(31,25), di24_20, inst(19,12))

  //-------------------------------------------------------------

  uop.is_br          := cs.is_br
  uop.is_jal         := (uop.uopc === uopJAL)
  uop.is_jalr        := (uop.uopc === uopJALR)
  // uop.is_jump        := cs.is_jal || (uop.uopc === uopJALR)
  // uop.is_ret         := (uop.uopc === uopJALR) &&
  //                       (uop.ldst === X0) &&
  //                       (uop.lrs1 === RA)
  // uop.is_call        := (uop.uopc === uopJALR || uop.uopc === uopJAL) &&
  //                       (uop.ldst === RA)

  //-------------------------------------------------------------

  io.deq.uop := uop
}

/**
 * Smaller Decode unit for the Frontend to decode different
 * branches.
 * Accepts EXPANDED RVC instructions
  */

class BranchDecodeSignals(implicit p: Parameters) extends BoomBundle
{
  val is_ret   = Bool()
  val is_call  = Bool()
  val target   = UInt(vaddrBitsExtended.W)
  val cfi_type = UInt(CFI_SZ.W)


  // Is this branch a short forwards jump?
  val sfb_offset = Valid(UInt(log2Ceil(icBlockBytes).W))
  // Is this instruction allowed to be inside a sfb?
  val shadowable = Bool()
}

class BranchDecode(implicit p: Parameters) extends BoomModule
{
  val io = IO(new Bundle {
    val inst    = Input(UInt(32.W))
    val pc      = Input(UInt(vaddrBitsExtended.W))

    val out = Output(new BranchDecodeSignals)
  })

  val bpd_csignals =
    freechips.rocketchip.rocket.DecodeLogic(io.inst,
                  List[BitPat](N, N, N, N, X),
////                               is br?
////                               |  is jal?
////                               |  |  is jalr?
////                               |  |  |
////                               |  |  |  shadowable
////                               |  |  |  |  has_rs2
////                               |  |  |  |  |
            Array[(BitPat, List[BitPat])](
               JAL         -> List(N, Y, N, N, X),
               JALR        -> List(N, N, Y, N, X),
               BEQ         -> List(Y, N, N, N, X),
               BNE         -> List(Y, N, N, N, X),
               BGE         -> List(Y, N, N, N, X),
               BGEU        -> List(Y, N, N, N, X),
               BLT         -> List(Y, N, N, N, X),
               BLTU        -> List(Y, N, N, N, X),

               SLLI        -> List(N, N, N, Y, N),
               SRLI        -> List(N, N, N, Y, N),
               SRAI        -> List(N, N, N, Y, N),

               ADDIW       -> List(N, N, N, Y, N),
               SLLIW       -> List(N, N, N, Y, N),
               SRAIW       -> List(N, N, N, Y, N),
               SRLIW       -> List(N, N, N, Y, N),

               ADDW        -> List(N, N, N, Y, Y),
               SUBW        -> List(N, N, N, Y, Y),
               SLLW        -> List(N, N, N, Y, Y),
               SRAW        -> List(N, N, N, Y, Y),
               SRLW        -> List(N, N, N, Y, Y),

               LUI         -> List(N, N, N, Y, N),

               ADDI        -> List(N, N, N, Y, N),
               ANDI        -> List(N, N, N, Y, N),
               ORI         -> List(N, N, N, Y, N),
               XORI        -> List(N, N, N, Y, N),
               SLTI        -> List(N, N, N, Y, N),
               SLTIU       -> List(N, N, N, Y, N),

               SLL         -> List(N, N, N, Y, Y),
               ADD         -> List(N, N, N, Y, Y),
               SUB         -> List(N, N, N, Y, Y),
               SLT         -> List(N, N, N, Y, Y),
               SLTU        -> List(N, N, N, Y, Y),
               AND         -> List(N, N, N, Y, Y),
               OR          -> List(N, N, N, Y, Y),
               XOR         -> List(N, N, N, Y, Y),
               SRA         -> List(N, N, N, Y, Y),
               SRL         -> List(N, N, N, Y, Y)
            ))

  val cs_is_br = bpd_csignals(0)(0)
  val cs_is_jal = bpd_csignals(1)(0)
  val cs_is_jalr = bpd_csignals(2)(0)
  val cs_is_shadowable = bpd_csignals(3)(0)
  val cs_has_rs2 = bpd_csignals(4)(0)

  io.out.is_call := (cs_is_jal || cs_is_jalr) && GetRd(io.inst) === RA
  io.out.is_ret  := cs_is_jalr && GetRs1(io.inst) === BitPat("b00?01") && GetRd(io.inst) === X0

  io.out.target := Mux(cs_is_br, ComputeBranchTarget(io.pc, io.inst, xLen),
                                 ComputeJALTarget(io.pc, io.inst, xLen))
  io.out.cfi_type :=
    Mux(cs_is_jalr,
      CFI_JALR,
    Mux(cs_is_jal,
      CFI_JAL,
    Mux(cs_is_br,
      CFI_BR,
      CFI_X)))

  val br_offset = Cat(io.inst(7), io.inst(30,25), io.inst(11,8), 0.U(1.W))
  // Is a sfb if it points forwards (offset is positive)
  io.out.sfb_offset.valid := cs_is_br && !io.inst(31) && br_offset =/= 0.U && (br_offset >> log2Ceil(icBlockBytes)) === 0.U
  io.out.sfb_offset.bits  := br_offset
  io.out.shadowable := cs_is_shadowable && (
    !cs_has_rs2 ||
    (GetRs1(io.inst) === GetRd(io.inst)) ||
    (io.inst === ADD && GetRs1(io.inst) === X0)
  )
}

/**
 * Track the current "branch mask", and give out the branch mask to each micro-op in Decode
 * (each micro-op in the machine has a branch mask which says which branches it
 * is being speculated under).
 *
 * @param pl_width pipeline width for the processor
 */
class BranchMaskGenerationLogic(val pl_width: Int)(implicit p: Parameters) extends BoomModule
{
  val io = IO(new Bundle {
    // guess if the uop is a branch (we'll catch this later)
    val is_branch = Input(Vec(pl_width, Bool()))
    // lock in that it's actually a branch and will fire, so we update
    // the branch_masks.
    val will_fire = Input(Vec(pl_width, Bool()))

    // give out tag immediately (needed in rename)
    // mask can come later in the cycle
    val br_tag    = Output(Vec(pl_width, UInt(brTagSz.W)))
    val br_mask   = Output(Vec(pl_width, UInt(maxBrCount.W)))

     // tell decoders the branch mask has filled up, but on the granularity
     // of an individual micro-op (so some micro-ops can go through)
    val is_full   = Output(Vec(pl_width, Bool()))

    val brupdate         = Input(new BrUpdateInfo())
    val flush_pipeline = Input(Bool())

    val debug_branch_mask = Output(UInt(maxBrCount.W))
  })

  val branch_mask = RegInit(0.U(maxBrCount.W))

  //-------------------------------------------------------------
  // Give out the branch tag to each branch micro-op

  var allocate_mask = branch_mask
  val tag_masks = Wire(Vec(pl_width, UInt(maxBrCount.W)))

  for (w <- 0 until pl_width) {
    // TODO this is a loss of performance as we're blocking branches based on potentially fake branches
    io.is_full(w) := (allocate_mask === ~(0.U(maxBrCount.W))) && io.is_branch(w)

    // find br_tag and compute next br_mask
    val new_br_tag = Wire(UInt(brTagSz.W))
    new_br_tag := 0.U
    tag_masks(w) := 0.U

    for (i <- maxBrCount-1 to 0 by -1) {
      when (~allocate_mask(i)) {
        new_br_tag := i.U
        tag_masks(w) := (1.U << i.U)
      }
    }

    io.br_tag(w) := new_br_tag
    allocate_mask = Mux(io.is_branch(w), tag_masks(w) | allocate_mask, allocate_mask)
  }

  //-------------------------------------------------------------
  // Give out the branch mask to each micro-op
  // (kill off the bits that corresponded to branches that aren't going to fire)

  var curr_mask = branch_mask
  for (w <- 0 until pl_width) {
    io.br_mask(w) := GetNewBrMask(io.brupdate, curr_mask)
    curr_mask = Mux(io.will_fire(w), tag_masks(w) | curr_mask, curr_mask)
  }

  //-------------------------------------------------------------
  // Update the current branch_mask

  when (io.flush_pipeline) {
    branch_mask := 0.U
  } .otherwise {
    val mask = Mux(io.brupdate.b2.mispredict,
      io.brupdate.b2.uop.br_mask,
      ~(0.U(maxBrCount.W)))
    branch_mask := GetNewBrMask(io.brupdate, curr_mask) & mask
  }

  io.debug_branch_mask := branch_mask
}
